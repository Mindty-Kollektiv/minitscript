# initialize
on: initialize
	console.printLine("-----------------------")
	console.printLine("loop-test: Initialize")
	console.printLine("-----------------------")
	console.printLine()
end

# inline function test in function
function: inlineFunctionTestInFunction()
	$j = 0
	forCondition($j < 5, -> { $j++ })
		if ($j == 3)
			continue
		end
		console.printLine("$j = " + $j)
		if ($j == 4)
			break
		end
	end
end

stacklet: incrementStacklet2(inlineFunctionTestInFunction3)
	$k++
end

stacklet: incrementStacklet(inlineFunctionTestInFunction3)
	$k = 0
	forCondition($k < 5, -> incrementStacklet2)
		console.printLine("$k = " + $k)
	end
	console.printLine("stacklet, yaaaay")
	$j++
end

# inline function test in function
function: inlineFunctionTestInFunction3()
	console.printLine("inlineFunctionTestInFunction3()")
	$j = 0
	forCondition($j < 5, -> incrementStacklet)
		if ($j == 3)
			continue
		end
		console.printLine("$j = " + $j)
		if ($j == 4)
			break
		end
	end
end

# if no condition is met, nothing will be executed, lol :D
on: nothing
	#bug
	#$stacklet =->{ console.printLine("xxx") }
	#works
	$stacklet = ->{ console.printLine("xxx") }
	$function  = () ->{ console.printLine("xxx") }
	console.dump($stacklet)
	console.dump($function)
	console.printLine("--------------------")
	console.printLine("loop-test: Nothing")
	console.printLine("--------------------")
	console.printLine()
	# tests for continue, break
	#	if successfull we should see 1, 2, 4
	console.printLine("tests continue, break")
	$i = 0
	forCondition($i < 5)
		$i++
		if ($i == 3)
			continue
		end
		if ($i == 5)
			break
		end
		console.printLine($i)
	end
	# test for continue 2, break 2 
	console.printLine("test continue 2, break 2 ")
	$i = 0
	forCondition($i < 5)
		console.printLine("$i = " + $i)
		$j = 0
		forCondition($j < 5)
			if ($i == 0 && $j == 1)
				$i++
				continue(2)
			elseif($i == 4 && $j == 2)
				$i++
				break(2)
			end
			console.printLine("    $j = " + $j)
			$j++
		end
		$i++
	end
	# test for forCondition with a inline iteration function, 
	#	which gets no own script state stack entry
	#	means it keeps variables and such 
	console.printLine("test forCondition with a iteration function")
	$i = 0
	forCondition($i < 5, -> { $i++ })
		if ($i == 3)
			continue
		end
		console.printLine("$i = " + $i)
		if ($i == 4)
			break
		end
	end
	# test for forCondition with a iteration function in a function
	console.printLine("test forCondition with a iteration function in a function")
	inlineFunctionTestInFunction()
	inlineFunctionTestInFunction3()
	# console.printLine("test for")
	console.printLine("test for")
	for ($i = 0, $i < 5, $i++)
		if ($i == 3)
			continue
		end
		console.printLine("$i = " + $i)
		if ($i == 4)
			break
		end
	end
	# test forEach with array
	console.printLine("test forEach with array")
	$array1 = [1,2,3,4,5,6,7,8,9,10]
	$array2 = [a,b,c]
	forEach($var1: $array1)
		console.printLine("$var1 = " + $var1)
		forEach($var2: $array2)
			console.printLine("	$var2 = " + $var2)
		end
	end
	console.printLine("test forEach with array and a reference to the array entry") 
	$array3 = [1,2,3]
	forEach($var3: $array3)
		console.printLine("$var3 = " + $var3)
	end
	$i = 3 
	forEach(&$var3: $array3)
		console.printLine("$i = " + $i + ", $var3 = " + $var3)
		$var3 = $i--
	end 
	forEach($var3: $array3)
		console.printLine("$var3 = " + $var3)
	end
	console.printLine("done")
	script.stop()
end

# an error has occurred
on: error
	console.printLine("------------------")
	console.printLine("loop-test: Error")
	console.printLine("------------------")
	console.printLine("An error occurred")
	script.stop()
end